name: Auto-update Charm Libraries
on:
  workflow_call:
    inputs:
      charm-path:
        description: "Path to the charm we want to publish. Defaults to the current working directory."
        default: '.'
        required: false
        type: string
    secrets:
      CHARMHUB_TOKEN:
        required: false
      OBSERVABILITY_NOCTUA_TOKEN:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  update-lib:
    name: Check libraries
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Merge update-libs PRs with green CI
        run: |
          # If CI checks are passing on a PR from "chore/auto-libs", merge it
          if gh pr checks chore/auto-libs; then
            gh pr merge chore/auto-libs 
          fi
        env:
          GH_TOKEN: ${{ secrets.OBSERVABILITY_NOCTUA_TOKEN }}

      - name: Check for major library updates
        run: |
          sudo snap install charmcraft --classic --channel latest/stable
          cd "$GITHUB_WORKSPACE/${{ inputs.charm-path }}"
          # Get the charm name
          charm_name=$((yq .name metadata.yaml 2>/dev/null || yq .name charmcraft.yaml) | tr - _)
          if [[ $charm_name = "" ]]; then echo "Error: can't extract the charm name." && exit 1; fi
          # For each library not belonging to the charm, check for a major version update
          #   "lib" would be of the form `charms.prometheus_k8s.v0.prometheus_scrape`
          for lib in $(find lib/charms/ -type f | grep '.py$' | grep -v "$charm_name" | sed 's|lib/||' | sed 's/.py//' | sed 's|/|.|g'); do
            # Extract the name of the library, the current major version, and the charm that owns it
            lib_name=$(cut -d. -f4 <<< "$lib")
            lib_major=$(cut -d. -f3 <<< "$lib")
            lib_owner=$(cut -d. -f2 <<< "$lib" | tr _ -)
            # Get the latest major version of the library from Charmhub
            latest_major=$(charmcraft list-lib $lib_owner --format=json | jq -r --arg LIBNAME "$lib_name" '.[] | select(.library_name == $LIBNAME) | .api')
            # If there is a new major version of the library, open a new issue
            if [[ $(echo "$lib_major\n$latest_major$" | sort -V | tail -n1 ) != "$lib_major" ]]; then
              gh issue create \
                --title "chore: update $lib to $latest_major" \
                --body "This issue was created automatically because a new major version was detected for a charm library." 
            fi
          done
          cd "$GITHUB_WORKSPACE"
        env:
          CHARMCRAFT_AUTH: "${{ secrets.CHARMHUB_TOKEN }}"
          GH_TOKEN: "${{ secrets.OBSERVABILITY_NOCTUA_TOKEN }}"

      - name: Fetch charm libraries
        run: |
          cd "$GITHUB_WORKSPACE/${{ inputs.charm-path }}"
          charmcraft fetch-lib
        env:
          CHARMCRAFT_AUTH: "${{ secrets.CHARMHUB_TOKEN }}"

      - name: Import and configure the GPG key for Noctua
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.NOCTUA_GPG_PRIVATE }}
          passphrase: ${{ secrets.NOCTUA_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Create a PR for local changes
        uses: peter-evans/create-pull-request@v6
        id: cpr
        with:
          token: ${{ secrets.OBSERVABILITY_NOCTUA_TOKEN }}
          commit-message: "chore: update charm libraries"
          committer: "Github Actions <github-actions@github.com>"
          author: "Github Actions <github-actions@github.com>"
          title: "chore: update charm libraries"
          body: |
            Automated action to fetch latest version of charm libraries. The branch of this PR 
            will be wiped during the next check. Unless you really know what you're doing, you 
            most likely don't want to push any commits to this branch.

            The PR will be auto-merged if the CI is green, unless it includes a major library
            version bump; in that case, manual changes are most likely required.
          branch: "${{ steps.fetch-libraries.outputs.pr_branch }}"
          delete-branch: true
