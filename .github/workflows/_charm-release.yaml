name: Release charm to Edge

on:
  workflow_call:
    inputs:
      release-channel:
        description: |
          Name of the Charmhub channel (with the format 'latest/edge') to release the charm to.
        type: string
        required: true
      charm-path:
        type: string
        required: false
        default: .
      runner:
        description: Name of the runner to use to build and release the charm.
        type: string
        required: false
        default: "ubuntu-latest"
      charmcraft-channel:
        type: string
        required: true
        description: |
          The snap channel from which to install Charmcraft.
      git-tag-prefix:
        description: "Tag prefix to use for the tag of the GitHub release."
        required: false
        type: string
    secrets:
      CHARMHUB_TOKEN:
        required: true
      OBSERVABILITY_NOCTUA_TOKEN:
        required: true

jobs:
  build:
    name: Pack the charm (${{ inputs.runner }})
    runs-on: ${{ inputs.runner }}
    outputs:
      charms: ${{ steps.pack.outputs.charms }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup LXD
        uses: canonical/setup-lxd@main
      - name: Install charmcraft
        run: |
          sudo snap install jq
          sudo snap install charmcraft --classic --channel="${{ inputs.charmcraft-channel }}"
      - name: Cache wheels
        uses: actions/cache@v4
        with:
          path: /home/runner/snap/charmcraft/common/cache/charmcraft
          key: ${{ runner.os }}-wheel-cache-${{ hashFiles('./uv.lock') }}
          # If the above cache key doesn't match, it's because the uv.lock has changed.
          # Even so, pre-existing caches may still contain useful cached builds for some
          # portion of the dependencies, and restore-keys can partially match a cache.
          restore-keys: |
            ${{ runner.os }}-wheel-cache-
      - name: Pack charm(s)
        id: pack
        run: |
          (cd ${{ inputs.charm-path }}; charmcraft pack)
          export CHARMS=$(basename -a ${{ inputs.charm-path }}/*.charm | jq -R -s -c 'split("\n")[:-1]')
          echo "charms=$CHARMS"
          echo "charms=$CHARMS" >> $GITHUB_OUTPUT
      - name: Store charm(s)
        uses: actions/upload-artifact@v4
        with:
          name: charms
          path: ${{ inputs.charm-path }}/*.charm
  charmhub-release:
    name: Release to CharmHub (${{ inputs.runner }})
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      uploaded-charm: ${{ steps.upload.outputs.uploaded_charm }}
    strategy:
      matrix:
        path: ${{ fromJSON(needs.build.outputs.charms) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo snap install yq
          sudo snap install charmcraft --classic --channel="${{ inputs.charmcraft-channel }}"
          sudo snap install astral-uv --classic
      - name: Read charm name from charmcraft.yaml or metadata.yaml
        id: get-charm-name
        run: |
          cd "${{ inputs.charm-path }}"
          charm_name=$(yq .name metadata.yaml 2>/dev/null || yq .name charmcraft.yaml)
          echo "charm_name=$charm_name" >> $GITHUB_OUTPUT
      - name: Fetch charm artifacts
        uses: actions/download-artifact@v4
        with:
          name: charms
          path: "${{ github.workspace }}/${{ inputs.charm-path }}"
      - name: Upload charm to Charmhub and release
        id: upload
        env:
          CHARMCRAFT_AUTH: ${{ secrets.CHARMHUB_TOKEN }}
        run: |
          # uploaded_charm has the following JSON format:
          # {"name": "o11y-tester", "revision": 12, "resources": [
          #   {"name": "httpbin-image", "revision": 1, "upstream_source": "kennethreitz/httpbin"}
          # ]}
          uploaded_charm="$( \
            uvx --from git+https://github.com/lucabello/noctua noctua charm release \
              "${{ steps.get-charm-name.outputs.charm_name }}" \
              --path "${{ matrix.path }}" \
              --channel "${{ inputs.release-channel }}" \
              --json \
          )"
          uploaded_charm_json="$(echo "$uploaded_charm" | jq -rc)"
          echo "uploaded_charm='$uploaded_charm_json'"
          echo "uploaded_charm='$uploaded_charm_json'" >> $GITHUB_OUTPUT
  github-release:
    name: Create the GitHub tag and release (${{ inputs.runner }})
    runs-on: ubuntu-latest
    needs:
      - build
      - charmhub-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "${{ github.event.head_commit.id }}"
      - name: Create the git tag and push it
        env:
          UPLOADED_CHARM: ${{ needs.charmhub-release.outputs.uploaded_charm }}
          TAG_PREFIX: ${{ inputs.git-tag-prefix }}
        run: |
          # Configure git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          # Use the latest commit message as the tag message
          git log -1 --pretty=%B > tag-message
          revision="$(echo "$UPLOADED_CHARM" | jq .revision)"
          git tag --annotate "${TAG_PREFIX}rev${revision}" --file=tag-message
          rm -f tag-message
          git push origin --tags
      - name: Build the GitHub release content
        env:
          UPLOADED_CHARM: ${{ needs.charmhub-release.outputs.uploaded_charm }}
          GH_TOKEN: ${{ secrets.OBSERVABILITY_NOCTUA_TOKEN }}
          TAG_PREFIX: ${{ inputs.git-tag-prefix }}
          RELEASE_CHANNEL: ${{ inputs.release-channel }}
        run: |
          revision="$(echo "$UPLOADED_CHARM" | jq .revision)"
          release_name="Revision $revision"
          # Add the charm information to the release body
          pretty_uploaded_charm="$(echo "$UPLOADED_CHARM"" | jq)"
          body_charm="$(print "\`\`\`json\n${pretty_uploaded_charm}\n\`\`\`")"
          body_meta="$(print "Released to *${RELEASE_CHANNEL}* on $(date -u +"%B %e, %Y at %H:%M UTC")")"
          body="$(print "${body_charm}\n\n${body_meta}")"
          # Create the GitHub release from the previously-created tag
          gh release create "${TAG_PREFIX}rev${revision}" --notes="$body" --generate-notes
