name: Open a PR to OCI Factory when a new ROCK is merged to main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      rock-name:
        description: "Name of the application for which to build the ROCK"
        required: true
        type: string
    secrets:
      OBSERVABILITY_NOCTUA_TOKEN:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  release-oci-factory:
    name: Add the new ROCK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the ROCK source
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          path: rock

      - name: Check for a new rockcraft.yaml from the latest commit
        id: changed-files
        uses: tj-actions/changed-files@v37
        with:
          files: '**/rockcraft.yaml'
          path: rock

      - name: Get the latest commit SHA
        id: commit-sha
        if: steps.changed-files.outputs.all_changed_and_modified_files != ''
        run: |
          cd $GITHUB_WORKSPACE/rock
          commit_sha=$(git rev-parse HEAD)
          cd $GITHUB_WORKSPACE
          echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT

      - name: Sync the OCI Factory fork
        id: fork-sync
        if: steps.changed-files.outputs.all_changed_and_modified_files != ''
        env:
          GH_TOKEN: ${{ secrets.OBSERVABILITY_NOCTUA_TOKEN }}
        run: gh repo sync --force observability-noctua-bot/oci-factory

      - name: Clone the fork
        id: fork-clone
        if: steps.changed-files.outputs.all_changed_and_modified_files != ''
        uses: actions/checkout@v3
        with:
          path: oci-factory
          repository: observability-noctua-bot/oci-factory
          token: ${{ secrets.OBSERVABILITY_NOCTUA_TOKEN }}

      - name: Update releases in image.yaml
        id: update-releases
        if: steps.changed-files.outputs.all_changed_and_modified_files != ''
        run: |
          all_tags="$(jq -r 'to_entries[] | .key' $GITHUB_WORKSPACE/oci-factory/oci/${{ inputs.rock-name }}/_releases.json | sed 's/-22.04//')"
          today="$(date)"
          echo "now_epoch=$(date -d now +%s)" >> $GITHUB_OUTPUT  # to create a unique branch name on the fork
          end_of_life="$(date -d "$today+1 year" +%Y-%m-%d)"
          yq -i ".upload = []" $GITHUB_WORKSPACE/oci-factory/oci/${{ inputs.rock-name }}/image.yaml
          for file in ${{ steps.changed-files.outputs.all_changed_and_modified_files }}; do
            # For each ROCK version, build the `upload:` element for image.yaml as a json
            # Example: {"source": "canonical/prometheus-rock", "commit": "...", ...}
            patch_tag=""; minor_tag=""; major_tag=""
            tag_json_format='"%s-22.04": {"end-of-life": "%sT00:00:00Z", "risks":["stable"]}'
            # Parse the ROCK version from the rockcraft.yaml
            rock_version=$(yq -r '.version' $GITHUB_WORKSPACE/rock/$file)
            # Always tag with patch
            patch_tag=$(printf "$tag_json_format" "$rock_version" "$end_of_life")
            # If rock_version is the latest tag among the ones with equal major.minor, apply major.minor
            rock_major_minor=$(echo $rock_version | sed -E "s/([0-9]+\.[0-9]+).*/\1/")
            same_major_minor=$(printf "%s\n%s" "$all_tags" "$rock_version" | grep "$rock_major_minor")
            if [[ $(echo "$same_major_minor" | sort -V | tail -n1) == "$rock_version" ]]; then
              minor_tag=$(printf ",$tag_json_format" "$rock_major_minor" "$end_of_life")
            fi
            # If rock_version is the latest among the ones with equal major, apply major
            rock_major=$(echo $rock_version | sed -E "s/([0-9]+).*/\1/")
            same_major=$(printf "%s\n%s" "$all_tags" "$rock_version" | grep "$rock_major")
            if [[ $(echo "$same_major" | sort -V | tail -n1) == "$rock_version" ]]; then
              major_tag=$(printf ",$tag_json_format" "$rock_major" "$end_of_life")
            fi
            # Build the final JSON object to update image.yaml
            rock_tags=$(printf '{%s%s%s}' "$patch_tag" "$minor_tag" "$major_tag")
            upload_item_format='{"source":"%s","commit":"%s","directory":"%s","release":%s}'
            upload_item=$(printf "$upload_item_format" \
              "canonical/${{ inputs.rock-name }}-rock" \
              "${{ steps.commit-sha.outputs.commit_sha }}" \
              "$rock_version" \
              "$rock_tags" \
            )
            yq -i ".upload += $upload_item" $GITHUB_WORKSPACE/oci-factory/oci/${{ inputs.rock-name }}/image.yaml
          done

      - name: Commit to the fork
        id: fork-commit
        if: steps.changed-files.outputs.all_changed_and_modified_files != ''
        uses: EndBug/add-and-commit@v9
        with:
          add: 'oci/${{ inputs.rock-name }}/image.yaml'
          cwd: './oci-factory'
          message: 'chore: Add new ${{ inputs.rock-name }} releases'
          new_branch: 'update-${{ steps.update-releases.outputs.now_epoch }}'

      - name: Open a PR from the fork to upstream
        if: steps.changed-files.outputs.all_changed_and_modified_files != ''
        id: upstream-pr
        env:
          GH_TOKEN: ${{ secrets.OBSERVABILITY_NOCTUA_TOKEN }}
        run: |
          cd $GITHUB_WORKSPACE/oci-factory
          gh pr create --repo canonical/oci-factory \
            --head observability-noctua-bot:update-${{ steps.update-releases.outputs.now_epoch }} \
            --title "chore: Add new ${{ inputs.rock-name }} releases" \
            --body "This is an automatic PR opened by the Observability Noctua bot."
