# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

name: Tiobe TiCS Analysis

on:
  workflow_call:
    inputs:
      charm-path:
        description: "Path to the charm we want to publish. Defaults to the current working directory."
        default: '.'
        required: false
        type: string
      tiobe-project-name:
        description: "Name under which this project is registered in Tiobe. Defaults to repository name."
        default: ""
        required: false
        type: string
      coverage-folder:
        description: "Folder under which the coverage xml report exists."
        default: "cover"
        required: false
        type: string

jobs:
  scan:
    name: Scan and upload
    runs-on: [self-hosted, linux, amd64, tiobe, jammy]
    timeout-minutes: 60
    steps:
      - name: Checkout the project
        uses: actions/checkout@v4
        with:
          repository: canonical/${{ github.event.repository.name }}

      - name: Install dependencies
        run: |
          sudo snap install charmcraft --classic
          sudo apt update && sudo apt install -y pipx
          pipx install "coverage[toml]"
          pipx install tox
          sudo snap install astral-uv --classic

      - name: Generate unittest coverage report
        env:
          CHARM_PATH: ${{ inputs.charm-path }}
          COVERAGE_FOLDER: ${{ inputs.coverage-folder }}
        run: |
          base_wd="$(pwd)"
          cd "${CHARM_PATH}"
          tox -e unit && coverage xml -o "${base_wd}/${COVERAGE_FOLDER}/cobertura.xml"

      - name: Activate and prepare Python virtual environment
        env:
          CHARM_PATH: ${{ inputs.charm-path }}
        run: |
          pushd "${CHARM_PATH}"
          if [[ -f uv.lock ]]; then
            uv sync --extra=dev
            source .venv/bin/activate
          else 
             python -m venv .venv
             source .venv/bin/activate
             uv pip install -r requirements.txt
          fi
          uv pip install pylint flake8
          echo "PATH=$PATH" >> "$GITHUB_ENV"
          popd

      - name: Run TICS analysis with github-action
        uses: tiobe/tics-github-action@v3
        with:
          mode: qserver
          project: ${{ inputs.tiobe-project-name || github.event.repository.name }}
          viewerUrl: https://canonical.tiobe.com/tiobeweb/TICS/api/cfg?name=default
          ticsAuthToken: ${{ secrets.TICSAUTHTOKEN }}
          installTics: true
