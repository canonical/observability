name: Quality Checks

on:
  workflow_call:
    inputs:
      charm-path:
        type: string
        required: false
      provider:
        type: string
        description: "The provider to choose for integration tests ('machine' or 'microk8s')"
        required: true
      charmcraft-channel:
        type: string
        default: "3.x/candidate"
        required: false
        description: |
          The snap channel from which to install Charmcraft.
      juju-channel:
        type: string
        required: false
        description: |
          The snap channel from which to install Juju.
          Overrides the default branch-dependant selection of the Juju version.
    secrets:
      CHARMHUB_TOKEN:
        required: false
jobs:
  check-secret:
    name: Check the CHARMHUB_TOKEN secret
    runs-on: ubuntu-latest
    outputs:
      defined: ${{ steps.check.outputs.defined }}
    steps:
      - id: check
        env:
          CHARMHUB_TOKEN: ${{ secrets.CHARMHUB_TOKEN }}
        if: "${{ env.CHARMHUB_TOKEN != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT

  snap-channels:
    name: Select snap channels
    runs-on: ubuntu-latest
    outputs:
      juju-channel: ${{ steps.channels.outputs.juju-channel }}
    env:
      BRANCH_NAME: ${{ github.base_ref || github.ref_name }} 
    steps:
      - name: Determine Juju version
        id: channels
        run: |
          # If a Juju version is passed from the inputs use that, otherwise use the defaults
          # we picked for each track name
          if [[ -n "${{ inputs.juju-channel }}" ]]; then
            echo "juju-channel=${{ inputs.juju-channel }}" >> $GITHUB_OUTPUT
          elif [[ "${BRANCH_NAME#refs/heads/}" == "track/1" ]]; then
            echo "juju-channel=3.1/stable" >> $GITHUB_OUTPUT
          else
            echo "juju-channel=3.6/stable" >> $GITHUB_OUTPUT
          fi

  call-inclusive-naming-check:
    # Issues with this workflow can be addressed by adding a .wokeignore in the repository root
    name: Inclusive naming
    uses: canonical/Inclusive-naming/.github/workflows/woke.yaml@main
    with:
      fail-on-error: "true"

  codeql:
    name: CodeQL analysis
    runs-on: ubuntu-latest
    needs:
      - static-analysis
      - linting
      - unit-test
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Lint
        run: |
          sudo snap install astral-uv --classic
          cd "${{ inputs.charm-path }}"
          uvx tox -e lint

  static-analysis:
    name: Static analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Static analysis
        run: |
          sudo snap install astral-uv --classic
          cd "${{ inputs.charm-path }}"
          uvx tox -e static

  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Unit tests
        run: |
          sudo snap install astral-uv --classic
          cd "${{ inputs.charm-path }}"
          uvx tox -e unit

  pack-charm:
    name: Pack the charm
    runs-on: ubuntu-latest
    needs:
      - static-analysis
      - linting
      - unit-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup LXD
        uses: canonical/setup-lxd@main
      - name: Install charmcraft
        run: sudo snap install charmcraft --classic
      - name: Run charmcraft pack
        run: |
          cd "${{ inputs.charm-path }}"
          charmcraft pack -v
      - name: Upload charm artifact
        uses: actions/upload-artifact@v4
        with:
          name: charm
          path: ${{ inputs.charm-path }}/*.charm

  integration-matrix:
    name: Define Integration tests matrix
    runs-on: ubuntu-latest
    needs: [pack-charm]
    outputs:
      suites: ${{ steps.suites.outputs.suites }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate matrix list
        id: suites
        run: |
          list="$(find tests/integration -name 'test_*.py' -printf '%f\n' | jq -r -ncR '[inputs]')"
          echo "suites=$list"
          echo "suites=$list" >> $GITHUB_OUTPUT
          
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [snap-channels, pack-charm, integration-matrix]
    strategy:
      fail-fast: false
      matrix:
        suite: ${{ fromJSON(needs.integration-matrix.outputs.suites) }}
    env:
      CONCIERGE_JUJU_CHANNEL: ${{ needs.snap-channels.outputs.juju-channel }}
      CONCIERGE_MICROK8S_CHANNEL: 1.31-strict/stable
      CONCIERGE_CHARMCRAFT_CHANNEL: ${{ inputs.charmcraft-channel }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo snap install concierge --classic
          sudo concierge prepare -p "${{ inputs.provider }}" --extra-snaps=astral-uv
      - name: Download charm artifact
        uses: actions/download-artifact@v4
        with:
          name: charm
          path: ${{ inputs.charm-path }}
      - name: Run integration tests
        run: |
          cd ${{ inputs.charm-path }}
          charm_relative_path="$(find . -maxdepth 1 -name '*.charm' | tail -n1)"
          export CHARM_PATH="$(realpath $charm_relative_path)"
          uvx tox -e integration -- -k "${{ matrix.suite }}"

